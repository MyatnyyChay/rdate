#!/bin/sh
#
# rdate		This shell script takes care of setting date from ntp server on startup
#
# chkconfig:    2345 11 89
# description:	set time with rdate
# processname:	rdate

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
if is_no "${NETWORKING}"; then
	msg_network_down rdate
	exit 1
fi

SET_TIME=no

# Get service config
if [ -f /etc/sysconfig/rdate ]; then
	. /etc/sysconfig/rdate
fi

# See how we were called.
case "$1" in
  start|restart)
	# Check if we have to do anything:
	if is_yes "${SET_TIME}"; then
		if [ -n "${RDATE_SERVERS}" ]; then
			run_cmd "Setting time from remote server: ${RDATE_SERVERS}" rdate -s -l "${RDATE_SERVERS}"
			if [ $? -eq 0 -a is_yes "${SYNC_HWCLOCK}" -a -x /sbin/hwclock ]; then
				# Set the system clock.
				ARC=0
				SRM=0
				UTC=0
				
				if [ -f /etc/sysconfig/clock ]; then
					. /etc/sysconfig/clock
				
					# convert old style clock config to new values
					if [ "${CLOCKMODE}" = "GMT" ]; then
						UTC=true
					elif [ "${CLOCKMODE}" = "ARC" ]; then
						ARC=true
					fi
				fi
				
				if grep "system serial" /proc/cpuinfo | grep -q MILO ; then
					ARC=true
				fi
				
				CLOCKFLAGS="--systohc"
				
				if is_yes "$UTC" ; then
					CLOCKFLAGS="$CLOCKFLAGS --utc"
				else
					CLOCKFLAGS="$CLOCKFLAGS --localtime"
				fi
				
				if is_yes "$ARC" ; then
					CLOCKFLAGS="$CLOCKFLAGS -A"
				fi
				
				if is_yes "$SRM" ; then
					CLOCKFLAGS="$CLOCKFLAGS -S"
				fi
				
				/sbin/hwclock $CLOCKFLAGS
			fi
		fi
	fi
	;;
  stop)
  	# nothing to do
	;;
  status)
	if [ -n "${RDATE_SERVERS}" ]; then
		rdate "${RDATE_SERVERS}"
		echo -n "Local time: "
		date
		echo -n "Local machine hardware clock: "
		clock --show
	fi
	;;
  *)
	msg_usage "$0 {start|stop|restart|status}"
	exit 1
esac
